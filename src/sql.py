# Snowflake Queries to analyze warehouse

#Warehouse Utilization
warehouse_utilization_query = """
SELECT
    WAREHOUSE_NAME,
    AVG_RUNNING * 100 / AVG_CLUSTER_SIZE AS AVG_LOAD_PERCENT,
    SUM(EXECUTED) AS TOTAL_QUERIES,
    SUM(CREDITS_USED) AS TOTAL_CREDITS_USED,
    AVG(AVG_RUNNING) AS AVG_CONCURRENT_QUERIES,
    AVG(AVG_QUEUE_TIME/1000000000) AS AVG_QUEUE_TIME_SECS
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
GROUP BY
    WAREHOUSE_NAME
ORDER BY
    TOTAL_CREDITS_USED DESC;
"""

#Warehouse Performance by Hour
warehouse_performance_by_hour_query = """
SELECT
    WAREHOUSE_NAME,
    TO_CHAR(START_TIME, 'YYYY-MM-DD HH24') AS HOUR,
    AVG(AVG_RUNNING) AS AVG_RUNNING_QUERIES,
    MAX(AVG_RUNNING) AS MAX_RUNNING_QUERIES,
    SUM(CREDITS_USED) AS CREDITS_USED
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -7, CURRENT_TIMESTAMP)  -- last 7 days
GROUP BY
    WAREHOUSE_NAME,
    TO_CHAR(START_TIME, 'YYYY-MM-DD HH24')
ORDER BY
    WAREHOUSE_NAME,
    HOUR;
"""

#Warehouse Credit Usage by Day
warehouse_credit_usage_by_day_query = """
SELECT
    WAREHOUSE_NAME,
    DATE(START_TIME) AS DATE,
    SUM(CREDITS_USED) AS CREDITS_USED
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE
    START_TIME >= DATEADD(MONTH, -1, CURRENT_DATE)  -- last 30 days
GROUP BY
    WAREHOUSE_NAME,
    DATE(START_TIME)
ORDER BY
    DATE DESC;
"""

#Query History with Execution Times
query_history_execution_times_query = """
SELECT
    QUERY_ID,
    WAREHOUSE_NAME,
    USER_NAME,
    DATABASE_NAME,
    SCHEMA_NAME,
    START_TIME,
    EXECUTION_TIME / 1000 AS EXECUTION_TIME_MS,
    CREDITS_USED,
    QUERY_TEXT
FROM
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
    AND WAREHOUSE_NAME IS NOT NULL
ORDER BY
    START_TIME DESC
LIMIT 100;
"""

#Warehouse Concurrency Levels
warehouse_concurrency_levels_query = """
SELECT
    WAREHOUSE_NAME,
    COUNT(*) AS HIGH_CONCURRENCY_EVENTS
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE
    AVG_RUNNING >= AVG_CLUSTER_SIZE * 0.8  -- warehouses running at 80% or more of their capacity
    AND START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
GROUP BY
    WAREHOUSE_NAME
ORDER BY
    HIGH_CONCURRENCY_EVENTS DESC;
"""

#Warehouse Resume/Suspend Events
warehouse_resume_suspend_events_query = """
SELECT
    WAREHOUSE_NAME,
    SUM(CASE WHEN RESUMED_AT IS NOT NULL THEN 1 ELSE 0 END) AS RESUME_COUNT,
    SUM(CASE WHEN SUSPENDED_AT IS NOT NULL THEN 1 ELSE 0 END) AS SUSPEND_COUNT
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_EVENTS_HISTORY
WHERE
    EVENT_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
GROUP BY
    WAREHOUSE_NAME
ORDER BY
    WAREHOUSE_NAME;
"""

#Query Execution Time Distribution
query_execution_time_distribution_query = """
SELECT
    WAREHOUSE_NAME,
    COUNT(*) AS QUERY_COUNT,
    AVG(EXECUTION_TIME/1000) AS AVG_EXECUTION_TIME_MS,
    MAX(EXECUTION_TIME/1000) AS MAX_EXECUTION_TIME_MS,
    MIN(EXECUTION_TIME/1000) AS MIN_EXECUTION_TIME_MS
FROM
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
GROUP BY
    WAREHOUSE_NAME
ORDER BY
    AVG_EXECUTION_TIME_MS DESC;
"""

#Failed Queries Analysis
failed_queries_analysis_query = """
SELECT
    QUERY_ID,
    WAREHOUSE_NAME,
    USER_NAME,
    ERROR_CODE,
    ERROR_MESSAGE,
    START_TIME,
    EXECUTION_TIME / 1000 AS EXECUTION_TIME_MS
FROM
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
    AND ERROR_CODE IS NOT NULL
ORDER BY
    START_TIME DESC;
"""

#Warehouse Scaling Events
warehouse_scaling_events_query = """
SELECT
    WAREHOUSE_NAME,
    START_TIME,
    END_TIME,
    INITIAL_SIZE,
    FINAL_SIZE
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
    AND INITIAL_SIZE != FINAL_SIZE
ORDER BY
    START_TIME DESC;
"""

#Top Resource-Consuming Queries
top_resource_consuming_queries_query = """
SELECT
    QUERY_ID,
    WAREHOUSE_NAME,
    USER_NAME,
    DATABASE_NAME,
    SCHEMA_NAME,
    EXECUTION_TIME / 1000 AS EXECUTION_TIME_MS,
    CREDITS_USED,
    QUERY_TEXT
FROM
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
ORDER BY
    CREDITS_USED DESC
LIMIT 50;
"""

#Long-Running Queries
long_running_queries_query = """
SELECT
    QUERY_ID,
    WAREHOUSE_NAME,
    USER_NAME,
    DATABASE_NAME,
    SCHEMA_NAME,
    START_TIME,
    EXECUTION_TIME / 1000 AS EXECUTION_TIME_MS,
    CREDITS_USED,
    QUERY_TEXT
FROM
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE
    EXECUTION_TIME > 60000000000  -- execution time longer than 60 seconds
    AND START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
ORDER BY
    EXECUTION_TIME DESC;
"""

#Warehouse Usage Trends
warehouse_usage_trends_query = """
SELECT
    WAREHOUSE_NAME,
    DATE_TRUNC('DAY', START_TIME) AS DATE,
    SUM(CREDITS_USED) AS CREDITS_USED
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE
    START_TIME >= DATEADD(MONTH, -6, CURRENT_TIMESTAMP)  -- last 6 months
GROUP BY
    WAREHOUSE_NAME,
    DATE
ORDER BY
    DATE;
"""

#Warehouse Inactive Time
warehouse_inactive_time_query = """
SELECT
    WAREHOUSE_NAME,
    COUNT(*) AS INACTIVE_PERIODS,
    SUM(TIMESTAMPDIFF(SECOND, RESUMED_AT, SUSPENDED_AT)) AS INACTIVE_SECONDS
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_EVENTS_HISTORY
WHERE
    RESUMED_AT IS NOT NULL
    AND SUSPENDED_AT IS NOT NULL
    AND NOT EXISTS (
        SELECT 1
        FROM SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY Q
        WHERE Q.WAREHOUSE_NAME = WAREHOUSE_EVENTS_HISTORY.WAREHOUSE_NAME
        AND Q.START_TIME BETWEEN WAREHOUSE_EVENTS_HISTORY.RESUMED_AT AND WAREHOUSE_EVENTS_HISTORY.SUSPENDED_AT
    )
GROUP BY
    WAREHOUSE_NAME
ORDER BY
    INACTIVE_PERIODS DESC;
"""

#Query Queue Analysis
query_queue_analysis_query = """
SELECT
    WAREHOUSE_NAME,
    AVG(AVG_QUEUE_TIME/1000000000) AS AVG_QUEUE_TIME_SECS,
    MAX(AVG_QUEUE_TIME/1000000000) AS MAX_QUEUE_TIME_SECS,
    COUNT(*) AS QUEUED_QUERY_COUNT
FROM
    SNOWFLAKE.ACCOUNT_USAGE.WAREHOUSE_METERING_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
    AND AVG_QUEUE_TIME > 0
GROUP BY
    WAREHOUSE_NAME
ORDER BY
    QUEUED_QUERY_COUNT DESC;
"""

#Cost Analysis by User
cost_analysis_by_user_query = """
SELECT
    USER_NAME,
    SUM(CREDITS_USED) AS TOTAL_CREDITS_USED,
    COUNT(QUERY_ID) AS TOTAL_QUERIES,
    AVG(EXECUTION_TIME/1000) AS AVG_EXECUTION_TIME_MS
FROM
    SNOWFLAKE.ACCOUNT_USAGE.QUERY_HISTORY
WHERE
    START_TIME >= DATEADD(DAY, -30, CURRENT_TIMESTAMP)  -- last 30 days
GROUP BY
    USER_NAME
ORDER BY
    TOTAL_CREDITS_USED DESC;
"""
